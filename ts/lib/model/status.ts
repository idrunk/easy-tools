// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "status.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message Status
 */
export interface Status {
    /**
     * @generated from protobuf field: optional bool status = 1;
     */
    status?: boolean;
    /**
     * @generated from protobuf field: optional int64 code = 2;
     */
    code?: bigint;
    /**
     * @generated from protobuf field: optional string msg = 3;
     */
    msg?: string;
    /**
     * @generated from protobuf field: optional string data = 4;
     */
    data?: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class Status$Type extends MessageType<Status> {
    constructor() {
        super("Status", [
            { no: 1, name: "status", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "code", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "msg", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "data", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Status>): Status {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<Status>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Status): Status {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool status */ 1:
                    message.status = reader.bool();
                    break;
                case /* optional int64 code */ 2:
                    message.code = reader.int64().toBigInt();
                    break;
                case /* optional string msg */ 3:
                    message.msg = reader.string();
                    break;
                case /* optional string data */ 4:
                    message.data = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Status, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool status = 1; */
        if (message.status !== undefined)
            writer.tag(1, WireType.Varint).bool(message.status);
        /* optional int64 code = 2; */
        if (message.code !== undefined)
            writer.tag(2, WireType.Varint).int64(message.code);
        /* optional string msg = 3; */
        if (message.msg !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.msg);
        /* optional string data = 4; */
        if (message.data !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.data);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Status
 */
export const Status = new Status$Type();
