// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "et.go.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message PbTopic
 */
export interface PbTopic {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: optional string key = 2;
     */
    key?: string;
    /**
     * @generated from protobuf field: optional string secret = 3;
     */
    secret?: string;
}
/**
 * @generated from protobuf message PbSignalling
 */
export interface PbSignalling {
    /**
     * @generated from protobuf oneof: sig
     */
    sig: {
        oneofKind: "req";
        /**
         * @generated from protobuf field: uint32 req = 1;
         */
        req: number;
    } | {
        oneofKind: "offer";
        /**
         * @generated from protobuf field: string offer = 2;
         */
        offer: string;
    } | {
        oneofKind: "answer";
        /**
         * @generated from protobuf field: string answer = 3;
         */
        answer: string;
    } | {
        oneofKind: "iceCandidate";
        /**
         * @generated from protobuf field: string iceCandidate = 4;
         */
        iceCandidate: string;
    } | {
        oneofKind: undefined;
    };
    /**
     * @generated from protobuf field: string requester = 5;
     */
    requester: string;
    /**
     * @generated from protobuf field: optional string responder = 6;
     */
    responder?: string;
    /**
     * @generated from protobuf field: optional string sender = 7;
     */
    sender?: string;
    /**
     * @generated from protobuf field: optional string receiver = 8;
     */
    receiver?: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class PbTopic$Type extends MessageType<PbTopic> {
    constructor() {
        super("PbTopic", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "key", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "secret", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PbTopic>): PbTopic {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<PbTopic>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PbTopic): PbTopic {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* optional string key */ 2:
                    message.key = reader.string();
                    break;
                case /* optional string secret */ 3:
                    message.secret = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PbTopic, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* optional string key = 2; */
        if (message.key !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.key);
        /* optional string secret = 3; */
        if (message.secret !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.secret);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PbTopic
 */
export const PbTopic = new PbTopic$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PbSignalling$Type extends MessageType<PbSignalling> {
    constructor() {
        super("PbSignalling", [
            { no: 1, name: "req", kind: "scalar", oneof: "sig", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "offer", kind: "scalar", oneof: "sig", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "answer", kind: "scalar", oneof: "sig", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "iceCandidate", kind: "scalar", oneof: "sig", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "requester", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "responder", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "sender", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "receiver", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PbSignalling>): PbSignalling {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.sig = { oneofKind: undefined };
        message.requester = "";
        if (value !== undefined)
            reflectionMergePartial<PbSignalling>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PbSignalling): PbSignalling {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 req */ 1:
                    message.sig = {
                        oneofKind: "req",
                        req: reader.uint32()
                    };
                    break;
                case /* string offer */ 2:
                    message.sig = {
                        oneofKind: "offer",
                        offer: reader.string()
                    };
                    break;
                case /* string answer */ 3:
                    message.sig = {
                        oneofKind: "answer",
                        answer: reader.string()
                    };
                    break;
                case /* string iceCandidate */ 4:
                    message.sig = {
                        oneofKind: "iceCandidate",
                        iceCandidate: reader.string()
                    };
                    break;
                case /* string requester */ 5:
                    message.requester = reader.string();
                    break;
                case /* optional string responder */ 6:
                    message.responder = reader.string();
                    break;
                case /* optional string sender */ 7:
                    message.sender = reader.string();
                    break;
                case /* optional string receiver */ 8:
                    message.receiver = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PbSignalling, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 req = 1; */
        if (message.sig.oneofKind === "req")
            writer.tag(1, WireType.Varint).uint32(message.sig.req);
        /* string offer = 2; */
        if (message.sig.oneofKind === "offer")
            writer.tag(2, WireType.LengthDelimited).string(message.sig.offer);
        /* string answer = 3; */
        if (message.sig.oneofKind === "answer")
            writer.tag(3, WireType.LengthDelimited).string(message.sig.answer);
        /* string iceCandidate = 4; */
        if (message.sig.oneofKind === "iceCandidate")
            writer.tag(4, WireType.LengthDelimited).string(message.sig.iceCandidate);
        /* string requester = 5; */
        if (message.requester !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.requester);
        /* optional string responder = 6; */
        if (message.responder !== undefined)
            writer.tag(6, WireType.LengthDelimited).string(message.responder);
        /* optional string sender = 7; */
        if (message.sender !== undefined)
            writer.tag(7, WireType.LengthDelimited).string(message.sender);
        /* optional string receiver = 8; */
        if (message.receiver !== undefined)
            writer.tag(8, WireType.LengthDelimited).string(message.receiver);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PbSignalling
 */
export const PbSignalling = new PbSignalling$Type();
