// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "et.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message PbChat
 */
export interface PbChat {
    /**
     * @generated from protobuf field: repeated PbChat.Message pack = 1;
     */
    pack: PbChat_Message[];
    /**
     * @generated from protobuf field: PbUser user = 2;
     */
    user?: PbUser;
}
/**
 * @generated from protobuf message PbChat.Message
 */
export interface PbChat_Message {
    /**
     * @generated from protobuf field: string timeId = 1;
     */
    timeId: string;
    /**
     * @generated from protobuf oneof: body
     */
    body: {
        oneofKind: "text";
        /**
         * @generated from protobuf field: string text = 2;
         */
        text: string;
    } | {
        oneofKind: "file";
        /**
         * @generated from protobuf field: PbChat.File file = 3;
         */
        file: PbChat_File;
    } | {
        oneofKind: "img";
        /**
         * @generated from protobuf field: PbChat.Image img = 4;
         */
        img: PbChat_Image;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message PbChat.File
 */
export interface PbChat_File {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string type = 3;
     */
    type: string;
    /**
     * @generated from protobuf field: uint64 size = 4;
     */
    size: bigint;
    /**
     * @generated from protobuf field: uint64 modified = 5;
     */
    modified: bigint;
    /**
     * @generated from protobuf field: optional bool download = 6;
     */
    download?: boolean; // 是否下载消息（下载他人发送的文件时生成的下载消息）
    /**
     * @generated from protobuf field: optional PbChat.DownloadState state = 7;
     */
    state?: PbChat_DownloadState;
}
/**
 * @generated from protobuf message PbChat.Image
 */
export interface PbChat_Image {
    /**
     * @generated from protobuf field: PbChat.File file = 1;
     */
    file?: PbChat_File;
    /**
     * @generated from protobuf field: uint32 width = 2;
     */
    width: number;
    /**
     * @generated from protobuf field: uint32 height = 3;
     */
    height: number;
}
/**
 * @generated from protobuf enum PbChat.DownloadState
 */
export enum PbChat_DownloadState {
    /**
     * @generated from protobuf enum value: NotDownloadable = 0;
     */
    NotDownloadable = 0,
    /**
     * @generated from protobuf enum value: Downloadable = 1;
     */
    Downloadable = 1,
    /**
     * @generated from protobuf enum value: Downloading = 2;
     */
    Downloading = 2,
    /**
     * @generated from protobuf enum value: Downloaded = 3;
     */
    Downloaded = 3
}
/**
 * @generated from protobuf message PbUser
 */
export interface PbUser {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string nick = 2;
     */
    nick: string;
}
/**
 * @generated from protobuf message PbTransporter
 */
export interface PbTransporter {
    /**
     * @generated from protobuf field: string msgId = 1;
     */
    msgId: string;
    /**
     * @generated from protobuf field: string loadId = 2;
     */
    loadId: string;
    /**
     * @generated from protobuf oneof: container
     */
    container: {
        oneofKind: "startOrEnd";
        /**
         * request
         *
         * @generated from protobuf field: bool startOrEnd = 3;
         */
        startOrEnd: boolean;
    } | {
        oneofKind: "ack";
        /**
         * @generated from protobuf field: uint32 ack = 4;
         */
        ack: number;
    } | {
        oneofKind: "resend";
        /**
         * @generated from protobuf field: PbTransporter.Resend resend = 5;
         */
        resend: PbTransporter_Resend;
    } | {
        oneofKind: "meta";
        /**
         * response
         *
         * @generated from protobuf field: PbTransporter.Meta meta = 6;
         */
        meta: PbTransporter_Meta;
    } | {
        oneofKind: "code";
        /**
         * @generated from protobuf field: PbTransporter.Code code = 7;
         */
        code: PbTransporter_Code;
    } | {
        oneofKind: "load";
        /**
         * @generated from protobuf field: PbTransporter.Payload load = 8;
         */
        load: PbTransporter_Payload;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message PbTransporter.Resend
 */
export interface PbTransporter_Resend {
    /**
     * @generated from protobuf field: uint32 index = 1;
     */
    index: number;
    /**
     * @generated from protobuf field: uint32 count = 2;
     */
    count: number;
}
/**
 * @generated from protobuf message PbTransporter.Meta
 */
export interface PbTransporter_Meta {
    /**
     * @generated from protobuf field: uint64 size = 1;
     */
    size: bigint;
}
/**
 * @generated from protobuf message PbTransporter.Payload
 */
export interface PbTransporter_Payload {
    /**
     * @generated from protobuf field: uint32 index = 2;
     */
    index: number;
    /**
     * @generated from protobuf field: bytes body = 3;
     */
    body: Uint8Array;
}
/**
 * @generated from protobuf enum PbTransporter.Code
 */
export enum PbTransporter_Code {
    /**
     * @generated from protobuf enum value: NonExistentLoad = 0;
     */
    NonExistentLoad = 0,
    /**
     * @generated from protobuf enum value: FailedToReadFile = 1;
     */
    FailedToReadFile = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class PbChat$Type extends MessageType<PbChat> {
    constructor() {
        super("PbChat", [
            { no: 1, name: "pack", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PbChat_Message },
            { no: 2, name: "user", kind: "message", T: () => PbUser }
        ]);
    }
    create(value?: PartialMessage<PbChat>): PbChat {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.pack = [];
        if (value !== undefined)
            reflectionMergePartial<PbChat>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PbChat): PbChat {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated PbChat.Message pack */ 1:
                    message.pack.push(PbChat_Message.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* PbUser user */ 2:
                    message.user = PbUser.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PbChat, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated PbChat.Message pack = 1; */
        for (let i = 0; i < message.pack.length; i++)
            PbChat_Message.internalBinaryWrite(message.pack[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* PbUser user = 2; */
        if (message.user)
            PbUser.internalBinaryWrite(message.user, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PbChat
 */
export const PbChat = new PbChat$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PbChat_Message$Type extends MessageType<PbChat_Message> {
    constructor() {
        super("PbChat.Message", [
            { no: 1, name: "timeId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "text", kind: "scalar", oneof: "body", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "file", kind: "message", oneof: "body", T: () => PbChat_File },
            { no: 4, name: "img", kind: "message", oneof: "body", T: () => PbChat_Image }
        ]);
    }
    create(value?: PartialMessage<PbChat_Message>): PbChat_Message {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.timeId = "";
        message.body = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<PbChat_Message>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PbChat_Message): PbChat_Message {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string timeId */ 1:
                    message.timeId = reader.string();
                    break;
                case /* string text */ 2:
                    message.body = {
                        oneofKind: "text",
                        text: reader.string()
                    };
                    break;
                case /* PbChat.File file */ 3:
                    message.body = {
                        oneofKind: "file",
                        file: PbChat_File.internalBinaryRead(reader, reader.uint32(), options, (message.body as any).file)
                    };
                    break;
                case /* PbChat.Image img */ 4:
                    message.body = {
                        oneofKind: "img",
                        img: PbChat_Image.internalBinaryRead(reader, reader.uint32(), options, (message.body as any).img)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PbChat_Message, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string timeId = 1; */
        if (message.timeId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.timeId);
        /* string text = 2; */
        if (message.body.oneofKind === "text")
            writer.tag(2, WireType.LengthDelimited).string(message.body.text);
        /* PbChat.File file = 3; */
        if (message.body.oneofKind === "file")
            PbChat_File.internalBinaryWrite(message.body.file, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* PbChat.Image img = 4; */
        if (message.body.oneofKind === "img")
            PbChat_Image.internalBinaryWrite(message.body.img, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PbChat.Message
 */
export const PbChat_Message = new PbChat_Message$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PbChat_File$Type extends MessageType<PbChat_File> {
    constructor() {
        super("PbChat.File", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "size", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "modified", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "download", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "state", kind: "enum", opt: true, T: () => ["PbChat.DownloadState", PbChat_DownloadState] }
        ]);
    }
    create(value?: PartialMessage<PbChat_File>): PbChat_File {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.name = "";
        message.type = "";
        message.size = 0n;
        message.modified = 0n;
        if (value !== undefined)
            reflectionMergePartial<PbChat_File>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PbChat_File): PbChat_File {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string type */ 3:
                    message.type = reader.string();
                    break;
                case /* uint64 size */ 4:
                    message.size = reader.uint64().toBigInt();
                    break;
                case /* uint64 modified */ 5:
                    message.modified = reader.uint64().toBigInt();
                    break;
                case /* optional bool download */ 6:
                    message.download = reader.bool();
                    break;
                case /* optional PbChat.DownloadState state */ 7:
                    message.state = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PbChat_File, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string type = 3; */
        if (message.type !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.type);
        /* uint64 size = 4; */
        if (message.size !== 0n)
            writer.tag(4, WireType.Varint).uint64(message.size);
        /* uint64 modified = 5; */
        if (message.modified !== 0n)
            writer.tag(5, WireType.Varint).uint64(message.modified);
        /* optional bool download = 6; */
        if (message.download !== undefined)
            writer.tag(6, WireType.Varint).bool(message.download);
        /* optional PbChat.DownloadState state = 7; */
        if (message.state !== undefined)
            writer.tag(7, WireType.Varint).int32(message.state);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PbChat.File
 */
export const PbChat_File = new PbChat_File$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PbChat_Image$Type extends MessageType<PbChat_Image> {
    constructor() {
        super("PbChat.Image", [
            { no: 1, name: "file", kind: "message", T: () => PbChat_File },
            { no: 2, name: "width", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "height", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PbChat_Image>): PbChat_Image {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.width = 0;
        message.height = 0;
        if (value !== undefined)
            reflectionMergePartial<PbChat_Image>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PbChat_Image): PbChat_Image {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* PbChat.File file */ 1:
                    message.file = PbChat_File.internalBinaryRead(reader, reader.uint32(), options, message.file);
                    break;
                case /* uint32 width */ 2:
                    message.width = reader.uint32();
                    break;
                case /* uint32 height */ 3:
                    message.height = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PbChat_Image, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* PbChat.File file = 1; */
        if (message.file)
            PbChat_File.internalBinaryWrite(message.file, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint32 width = 2; */
        if (message.width !== 0)
            writer.tag(2, WireType.Varint).uint32(message.width);
        /* uint32 height = 3; */
        if (message.height !== 0)
            writer.tag(3, WireType.Varint).uint32(message.height);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PbChat.Image
 */
export const PbChat_Image = new PbChat_Image$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PbUser$Type extends MessageType<PbUser> {
    constructor() {
        super("PbUser", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "nick", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PbUser>): PbUser {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.nick = "";
        if (value !== undefined)
            reflectionMergePartial<PbUser>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PbUser): PbUser {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string nick */ 2:
                    message.nick = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PbUser, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string nick = 2; */
        if (message.nick !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.nick);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PbUser
 */
export const PbUser = new PbUser$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PbTransporter$Type extends MessageType<PbTransporter> {
    constructor() {
        super("PbTransporter", [
            { no: 1, name: "msgId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "loadId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "startOrEnd", kind: "scalar", oneof: "container", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "ack", kind: "scalar", oneof: "container", T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "resend", kind: "message", oneof: "container", T: () => PbTransporter_Resend },
            { no: 6, name: "meta", kind: "message", oneof: "container", T: () => PbTransporter_Meta },
            { no: 7, name: "code", kind: "enum", oneof: "container", T: () => ["PbTransporter.Code", PbTransporter_Code] },
            { no: 8, name: "load", kind: "message", oneof: "container", T: () => PbTransporter_Payload }
        ]);
    }
    create(value?: PartialMessage<PbTransporter>): PbTransporter {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.msgId = "";
        message.loadId = "";
        message.container = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<PbTransporter>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PbTransporter): PbTransporter {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string msgId */ 1:
                    message.msgId = reader.string();
                    break;
                case /* string loadId */ 2:
                    message.loadId = reader.string();
                    break;
                case /* bool startOrEnd */ 3:
                    message.container = {
                        oneofKind: "startOrEnd",
                        startOrEnd: reader.bool()
                    };
                    break;
                case /* uint32 ack */ 4:
                    message.container = {
                        oneofKind: "ack",
                        ack: reader.uint32()
                    };
                    break;
                case /* PbTransporter.Resend resend */ 5:
                    message.container = {
                        oneofKind: "resend",
                        resend: PbTransporter_Resend.internalBinaryRead(reader, reader.uint32(), options, (message.container as any).resend)
                    };
                    break;
                case /* PbTransporter.Meta meta */ 6:
                    message.container = {
                        oneofKind: "meta",
                        meta: PbTransporter_Meta.internalBinaryRead(reader, reader.uint32(), options, (message.container as any).meta)
                    };
                    break;
                case /* PbTransporter.Code code */ 7:
                    message.container = {
                        oneofKind: "code",
                        code: reader.int32()
                    };
                    break;
                case /* PbTransporter.Payload load */ 8:
                    message.container = {
                        oneofKind: "load",
                        load: PbTransporter_Payload.internalBinaryRead(reader, reader.uint32(), options, (message.container as any).load)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PbTransporter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string msgId = 1; */
        if (message.msgId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.msgId);
        /* string loadId = 2; */
        if (message.loadId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.loadId);
        /* bool startOrEnd = 3; */
        if (message.container.oneofKind === "startOrEnd")
            writer.tag(3, WireType.Varint).bool(message.container.startOrEnd);
        /* uint32 ack = 4; */
        if (message.container.oneofKind === "ack")
            writer.tag(4, WireType.Varint).uint32(message.container.ack);
        /* PbTransporter.Resend resend = 5; */
        if (message.container.oneofKind === "resend")
            PbTransporter_Resend.internalBinaryWrite(message.container.resend, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* PbTransporter.Meta meta = 6; */
        if (message.container.oneofKind === "meta")
            PbTransporter_Meta.internalBinaryWrite(message.container.meta, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* PbTransporter.Code code = 7; */
        if (message.container.oneofKind === "code")
            writer.tag(7, WireType.Varint).int32(message.container.code);
        /* PbTransporter.Payload load = 8; */
        if (message.container.oneofKind === "load")
            PbTransporter_Payload.internalBinaryWrite(message.container.load, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PbTransporter
 */
export const PbTransporter = new PbTransporter$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PbTransporter_Resend$Type extends MessageType<PbTransporter_Resend> {
    constructor() {
        super("PbTransporter.Resend", [
            { no: 1, name: "index", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "count", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PbTransporter_Resend>): PbTransporter_Resend {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.index = 0;
        message.count = 0;
        if (value !== undefined)
            reflectionMergePartial<PbTransporter_Resend>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PbTransporter_Resend): PbTransporter_Resend {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 index */ 1:
                    message.index = reader.uint32();
                    break;
                case /* uint32 count */ 2:
                    message.count = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PbTransporter_Resend, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 index = 1; */
        if (message.index !== 0)
            writer.tag(1, WireType.Varint).uint32(message.index);
        /* uint32 count = 2; */
        if (message.count !== 0)
            writer.tag(2, WireType.Varint).uint32(message.count);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PbTransporter.Resend
 */
export const PbTransporter_Resend = new PbTransporter_Resend$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PbTransporter_Meta$Type extends MessageType<PbTransporter_Meta> {
    constructor() {
        super("PbTransporter.Meta", [
            { no: 1, name: "size", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<PbTransporter_Meta>): PbTransporter_Meta {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.size = 0n;
        if (value !== undefined)
            reflectionMergePartial<PbTransporter_Meta>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PbTransporter_Meta): PbTransporter_Meta {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 size */ 1:
                    message.size = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PbTransporter_Meta, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 size = 1; */
        if (message.size !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.size);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PbTransporter.Meta
 */
export const PbTransporter_Meta = new PbTransporter_Meta$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PbTransporter_Payload$Type extends MessageType<PbTransporter_Payload> {
    constructor() {
        super("PbTransporter.Payload", [
            { no: 2, name: "index", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "body", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<PbTransporter_Payload>): PbTransporter_Payload {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.index = 0;
        message.body = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<PbTransporter_Payload>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PbTransporter_Payload): PbTransporter_Payload {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 index */ 2:
                    message.index = reader.uint32();
                    break;
                case /* bytes body */ 3:
                    message.body = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PbTransporter_Payload, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 index = 2; */
        if (message.index !== 0)
            writer.tag(2, WireType.Varint).uint32(message.index);
        /* bytes body = 3; */
        if (message.body.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.body);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PbTransporter.Payload
 */
export const PbTransporter_Payload = new PbTransporter_Payload$Type();
